syntax = "proto3";
import public "common.proto";
import public "pod.proto";

package pb;
option go_package=".;pb";


message JoinRequest {
    string node_name = 1;
    string token = 2;
    string cloud_address = 3;
}

message JoinResponse {
    Common.Error error = 1;
    string vk_url = 2;//云端创建了ingress,返回的路由路径,通过这个建立websocket连接
}


message ResetRequest {
    string node_name = 1;
}

message ResetResponse {
    Common.Error error = 1;
}

message CreatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message CreatePodResponse {
    Common.Error error = 1;
}

message UpdatePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message UpdatePodResponse {
    Common.Error error = 1;
}

message DeletePodRequest {
    k8s.io.api.core.v1.Pod pod = 1;
}

message DeletePodResponse {
    Common.Error error = 1;
}

message GetPodsRequest {
    string namespace = 1;
    string name = 2;
}

message GetPodsResponse {
    Common.Error error = 1;
    repeated k8s.io.api.core.v1.Pod pods = 2;
}

message GetPodStatusRequest {

}

message GetPodStatusResponse {

}

message GetContainerLogsRequest {

}

message GetContainerLogsResponse {

}

message RunInContainerRequest {

}

message RunInContainerResponse {

}

message GetStatsSummaryRequest {

}

message GetStatsSummaryResponse {

}

service Edgelet {
    //FOR edgectl

    //edge join cloud-cluster
    rpc Join(JoinRequest) returns(JoinResponse);

    //edge leave from cloud-cluster
    rpc Reset(ResetRequest) returns(ResetResponse);

    //FOR cloud-cluster callback

    // CreatePod accepts a Pod definition
    rpc CreatePod(CreatePodRequest) returns(CreatePodResponse);

    // UpdatePod accepts a Pod definition and updates its reference.
    rpc UpdatePod(UpdatePodRequest) returns (UpdatePodResponse);

    // DeletePod deletes the specified pod
    rpc DeletePod(DeletePodRequest) returns (DeletePodResponse);

    // GetPods returns a list of all pods known to be "running".
    rpc GetPods(GetPodsRequest) returns (GetPodsResponse); 

    // GetPodStatus returns the status of a pod by name that is "running".
    // returns nil if a pod by that name is not found
    rpc GetPodStatus(GetPodStatusRequest) returns(GetPodStatusResponse);

    // GetContainerLogs retrieves the logs of a container
    rpc GetContainerLogs(GetContainerLogsRequest) returns (stream GetContainerLogsResponse);

    // RunInContainer executes a command in a container in the pod, copying data
    // between in/out/err and the container's stdin/stdout/stderr.
    rpc RunInContainer(RunInContainerRequest) returns (RunInContainerResponse);

    //GetStatsSummary returns dummy stats for all pods known
    rpc GetStatsSummary(GetStatsSummaryRequest) returns (GetStatsSummaryResponse);
}
